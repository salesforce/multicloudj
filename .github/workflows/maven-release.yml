name: Maven Release

on:
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: 'Release version (e.g., 0.2.5)'
        required: true
        type: string
      nextVersion:
        description: 'Next development version (e.g., 0.2.6-SNAPSHOT)'
        required: true
        type: string

# Only allow maintainers and admins to trigger this workflow
# Configure in Settings → Actions → General → Workflow permissions

jobs:
  release:
    runs-on: ubuntu-latest
    environment: production  # Requires approval from designated reviewers
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'maven'
          server-id: central-mj
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Update version to release version
        run: |
          mvn versions:set -DnewVersion=${{ inputs.releaseVersion }} -DgenerateBackupPoms=false
          git add .
          git commit -m "chore: release version ${{ inputs.releaseVersion }}"

      - name: Build and test
        run: mvn clean verify -Dmaven.test.failure.ignore=false

      - name: Deploy to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_TOKEN }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: mvn deploy -Prelease -DskipTests

      - name: Create Git tag
        run: |
          git tag -a "v${{ inputs.releaseVersion }}" -m "Release version ${{ inputs.releaseVersion }}"
          git push origin "v${{ inputs.releaseVersion }}"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --abbrev=0 --tags HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --no-merges)
          else
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"* %s (%h)" --no-merges)
          fi

          # Save changelog to file for multiline output
          echo "$CHANGELOG" > changelog.txt
          echo "previous_tag=$PREVIOUS_TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ inputs.releaseVersion }}
          name: Release ${{ inputs.releaseVersion }}
          body_path: changelog.txt
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update to next development version
        run: |
          git checkout -b release/prepare-${{ inputs.nextVersion }}
          mvn versions:set -DnewVersion=${{ inputs.nextVersion }} -DgenerateBackupPoms=false
          git add .
          git commit -m "chore: prepare next development iteration ${{ inputs.nextVersion }}"
          git push origin release/prepare-${{ inputs.nextVersion }}

      - name: Create PR for next version
        run: |
          gh pr create \
            --base main \
            --head release/prepare-${{ inputs.nextVersion }} \
            --title "chore: prepare next development iteration ${{ inputs.nextVersion }}" \
            --body "Automated version bump after release ${{ inputs.releaseVersion }}" \
            --assignee ${{ github.actor }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
